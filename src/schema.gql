# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

interface AddressInterface implements Node & NodeTimestamps {
  city: String
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  postalCode: Int
  state: String
  street: String
  streetNumber: String
  updatedAt: DateTime
  uuid: String
}

type Customer implements Node & NodeTimestamps {
  createdAt: DateTime!
  customerAddress: [CustomerAddress!]
  deletedAt: DateTime
  id: ID!
  name: String!
  updatedAt: DateTime
  uuid: String
}

type CustomerAddress implements AddressInterface & Node & NodeTimestamps {
  city: String
  createdAt: DateTime!
  customer: Customer!
  deletedAt: DateTime
  description: String
  group: String!
  id: ID!
  isDefault: Boolean!
  postalCode: Int
  state: String
  street: String
  streetNumber: String
  updatedAt: DateTime
  uuid: String
}

input CustomerAddressCreateInput {
  city: String
  description: String
  group: String!
  isDefault: Boolean
  postalCode: Float
  state: String
  street: String
  streetNumber: String
}

input CustomerCreateInput {
  customerAddress: [CustomerAddressCreateInput!]
  name: String!
}

input CustomerUpdateInput {
  name: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Mutation {
  createCustomer(data: CustomerCreateInput!): Customer!
  deleteCustomer(id: ID!, name: String, uuid: String): Customer!
  updateCustomer(data: CustomerUpdateInput!, id: ID!, name: String, uuid: String): Customer!
}

interface Node implements NodeTimestamps {
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  updatedAt: DateTime
  uuid: String
}

interface NodeTimestamps {
  createdAt: DateTime!
  deletedAt: DateTime
  updatedAt: DateTime
}

type Query {
  customer(id: ID!, name: String, uuid: String): Customer
  customers: [Customer!]!
}
